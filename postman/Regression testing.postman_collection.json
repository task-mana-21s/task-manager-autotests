{
	"info": {
		"_postman_id": "4702b042-4138-4410-9c6b-8e0b8bcee059",
		"name": "Regression testing",
		"description": "# 🧪 Task Manager API Tests\n\n1. **Status code verification:** We'll check if the API returns the expected status codes for various requests, ensuring reliability and proper error handling.\n2. **JSON schema verification:** We'll make sure the JSON response conforms to a specified JSON Schema, ensuring API contracts are honored.\n3. **Response time verification:** We'll verify that the API's response time is within the acceptable range, providing a smooth user experience and optimizing performance.\n4. **Response body verification:** We'll validate the structure and content of the response body for accuracy, ensuring the integrity of the data and preventing potential issues downstream.\n5. **Header verification:** We'll confirm the presence and correct values of specific headers in the response, enabling secure and well-structured communication between your app and its users.\n    \n\n## 🔖 **How to use tests**\n\n**Step 1:** Send the sample requests and view the response and test results.\n\n**Step 2:** Replace the sample request URLs with your desired API endpoints.\n\n**Step 3:** Customize the tests in the \"Tests\" tab if needed. Don't forget to save your changes.\n\n**Step 4:** Run the collection by selecting \"Run\".\n\n<img src=\"https://content.pstmn.io/666cfa65-6e00-4308-871b-f831128bc0ac/Y29sbGVjdGlvbi1ydW5uZXItYnV0dG9uLmpwZWc=\" width=\"246\" height=\"102\">\n\n### ℹ️ Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2277204"
	},
	"item": [
		{
			"name": "Task",
			"item": [
				{
					"name": "Header verification for tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify response headers have expected values\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/hal+json\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "This request has a test asserting that certain response headers are present or have an expected value.\n\nYou can access details of the response, such as headers, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
					},
					"response": []
				},
				{
					"name": "Status code verification for tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
					},
					"response": []
				},
				{
					"name": "Status code verification for single task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tasks/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"1"
							]
						},
						"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
					},
					"response": []
				},
				{
					"name": "Create new task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Describe the expected response shape with JSON Schema",
									"// https://json-schema.org/",
									"const expectedSchema = {",
									"    \"id\": 4,",
									"    \"name\": \"Jonas\",",
									"    \"description\": \"description 123\",",
									"    \"dueDate\": null,",
									"    \"priority\": null,",
									"    \"createdAt\": null,",
									"    \"updatedAt\": null,",
									"    \"status\": null,",
									"    \"user\": null",
									"};",
									"",
									"// Test that the response matches the expected schema using built-in schema verification",
									"pm.test('response matches JSON schema', () => {",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Jonas\",\r\n  \"description\": \"description 123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
					},
					"response": []
				},
				{
					"name": "Update task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Describe the expected response shape with JSON Schema\r",
									"// https://json-schema.org/\r",
									"const expectedSchema = {\r",
									"    \"id\": 5,\r",
									"    \"name\": \"Change\",\r",
									"    \"description\": \"123\",\r",
									"    \"dueDate\": null,\r",
									"    \"priority\": null,\r",
									"    \"createdAt\": null,\r",
									"    \"updatedAt\": null,\r",
									"    \"status\": null,\r",
									"    \"user\": null\r",
									"};\r",
									"\r",
									"// Test that the response matches the expected schema using built-in schema verification\r",
									"pm.test('response matches JSON schema', () => {\r",
									"    pm.response.to.have.jsonSchema(expectedSchema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Change\",\r\n  \"description\": \"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tasks/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Status",
			"item": [
				{
					"name": "Header verification for status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify response headers have expected values\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/hal+json\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"status"
							]
						},
						"description": "This request has a test asserting that certain response headers are present or have an expected value.\n\nYou can access details of the response, such as headers, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
					},
					"response": []
				},
				{
					"name": "Status code verification for status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"status"
							]
						},
						"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
					},
					"response": []
				},
				{
					"name": "Status code verification for single status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/statuses/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"statuses",
								"1"
							]
						},
						"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
					},
					"response": []
				},
				{
					"name": "Assign status to task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Describe the expected response shape with JSON Schema",
									"// https://json-schema.org/",
									"const expectedSchema = {",
									"    \"id\": 1,",
									"    \"name\": \"Dev task\",",
									"    \"description\": \"Dev and other things\",",
									"    \"dueDate\": null,",
									"    \"priority\": null,",
									"    \"createdAt\": null,",
									"    \"updatedAt\": null,",
									"    \"status\": {",
									"        \"id\": 3,",
									"        \"status\": \"Done\"",
									"    },",
									"    \"user\": {",
									"        \"userId\": 1,",
									"        \"username\": \"Jonas Joanitis\",",
									"        \"password\": \"$2a$10$7bp7lk7EO3cLOSDM5ZF.WevWu5b9OVxD2VINspujB/UTsLfCTP8sy\",",
									"        \"email\": \"test@ff.tt\",",
									"        \"createdAt\": null,",
									"        \"updatedAt\": null",
									"    }",
									"};",
									"",
									"// Test that the response matches the expected schema using built-in schema verification",
									"pm.test('response matches JSON schema', () => {",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Jonas\",\r\n  \"description\": \"description 123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks/1/status/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"1",
								"status",
								"3"
							]
						},
						"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
					},
					"response": []
				},
				{
					"name": "Create new status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Describe the expected response shape with JSON Schema",
									"// https://json-schema.org/",
									"const expectedSchema = {",
									"    \"id\": 5,",
									"    \"status\": \"test\"",
									"};",
									"",
									"// Test that the response matches the expected schema using built-in schema verification",
									"pm.test('response matches JSON schema', () => {",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 5,\r\n  \"status\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/statuses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"statuses"
							]
						},
						"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
					},
					"response": []
				},
				{
					"name": "Update status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Describe the expected response shape with JSON Schema\r",
									"// https://json-schema.org/\r",
									"const expectedSchema = {\r",
									"    \"id\": 1,\r",
									"    \"status\": \"Change\"\r",
									"};\r",
									"\r",
									"// Test that the response matches the expected schema using built-in schema verification\r",
									"pm.test('response matches JSON schema', () => {\r",
									"    pm.response.to.have.jsonSchema(expectedSchema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"Change\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/statuses/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"statuses",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/statuses/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"statuses",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Header verification for users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify response headers have expected values\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/hal+json\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "This request has a test asserting that certain response headers are present or have an expected value.\n\nYou can access details of the response, such as headers, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
					},
					"response": []
				},
				{
					"name": "Status code verification for users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
					},
					"response": []
				},
				{
					"name": "Status code verification for single user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						},
						"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
					},
					"response": []
				},
				{
					"name": "Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Describe the expected response shape with JSON Schema",
									"// https://json-schema.org/",
									"const expectedSchema = {",
									"    \"userId\": 5,",
									"    \"username\": \"Postman1\",",
									"    \"password\": \"$2a$10$WcDddqPmUlCLHbvwA1Cdrui1TjEBZ6uSglze3IWSwcyJiB.LAjEOS\",",
									"    \"email\": \"test@test.gg\",",
									"    \"createdAt\": null,",
									"    \"updatedAt\": null",
									"};",
									"",
									"// Test that the response matches the expected schema using built-in schema verification",
									"pm.test('response matches JSON schema', () => {",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"Postman1\",\r\n  \"password\": \"test\",\r\n  \"email\": \"test@test.gg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"register"
							]
						},
						"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Describe the expected response shape with JSON Schema\r",
									"// https://json-schema.org/\r",
									"const expectedSchema = {\r",
									"    \"userId\": 1,\r",
									"    \"username\": \"update\",\r",
									"    \"password\": \"update\",\r",
									"    \"email\": \"update@test.gg\",\r",
									"    \"createdAt\": null,\r",
									"    \"updatedAt\": null\r",
									"};\r",
									"\r",
									"// Test that the response matches the expected schema using built-in schema verification\r",
									"pm.test('response matches JSON schema', () => {\r",
									"    pm.response.to.have.jsonSchema(expectedSchema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 1,\r\n  \"username\": \"update\",\r\n  \"password\": \"update\",\r\n  \"email\": \"update@test.gg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "Assign task to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Describe the expected response shape with JSON Schema",
									"// https://json-schema.org/",
									"const expectedSchema = {",
									"    \"id\": 1,",
									"    \"name\": \"Dev task\",",
									"    \"description\": \"Dev and other things\",",
									"    \"dueDate\": null,",
									"    \"priority\": null,",
									"    \"createdAt\": null,",
									"    \"updatedAt\": null,",
									"    \"status\": {",
									"        \"id\": 1,",
									"        \"status\": \"To-do\"",
									"    },",
									"    \"user\": {",
									"        \"userId\": 1,",
									"        \"username\": \"Jonas Joanitis\",",
									"        \"password\": \"$2a$10$7bp7lk7EO3cLOSDM5ZF.WevWu5b9OVxD2VINspujB/UTsLfCTP8sy\",",
									"        \"email\": \"test@ff.tt\",",
									"        \"createdAt\": null,",
									"        \"updatedAt\": null",
									"    }",
									"};",
									"",
									"// Test that the response matches the expected schema using built-in schema verification",
									"pm.test('response matches JSON schema', () => {",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Jonas\",\r\n  \"description\": \"description 123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks/1/user/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"1",
								"user",
								"1"
							]
						},
						"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
					},
					"response": []
				}
			]
		},
		{
			"name": "Weather request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/weather/vilnius",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"weather",
						"vilnius"
					]
				}
			},
			"response": []
		},
		{
			"name": "Status code verification base dir",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						""
					]
				},
				"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
			},
			"response": []
		},
		{
			"name": "Response time verification base dir",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify response time is less than 5 seconds\", function () {",
							"    const fiveSecondsMs = 5_000; // 5 seconds in milliseconds",
							"    pm.expect(pm.response.responseTime).to.be.below(fiveSecondsMs);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"foo\": \"bar\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						""
					]
				},
				"description": "This request has a test asserting that a response is received within a specific time limit (in this case 5 seconds). This is useful for ensuring consistent API performance.\n\nYou can access details of the response, such as response time, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}